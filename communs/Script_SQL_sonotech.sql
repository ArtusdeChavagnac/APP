-- MySQL Script generated by MySQL Workbench
-- Fri Dec 1 16:57:33 2023
-- Model: New ModelVersion: 1.0
-- MySQL Workbench Forward Engineering
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
-- -----------------------------------------------------
-- Schema sonotech
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table `Abonnement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Abonnement` (
`idAbonnement` INT NOT NULL,
`Type d'abonnement` VARCHAR(45) NOT NULL,
`Fonctionalité` VARCHAR(45) NOT NULL,
`Cout` VARCHAR(45) NOT NULL,
`Date début` VARCHAR(45) NULL,
`Date fin` VARCHAR(45) NULL,
PRIMARY KEY (`idAbonnement`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Utilisateur` (
`idUtilisateur` INT NOT NULL,
`Nom` VARCHAR(45) NOT NULL,
`Prénom` VARCHAR(45) NOT NULL,
`Date de Naissance` VARCHAR(45) NOT NULL,
`Adresse Email` VARCHAR(45) BINARY NOT NULL,
`Numéro de Téléphone` VARCHAR(45) NOT NULL,
`Abonnement_idAbonnement` INT NOT NULL,
PRIMARY KEY (`idUtilisateur`, `Abonnement_idAbonnement`),
CONSTRAINT `fk_Utilisateur_Abonnement1`
FOREIGN KEY (`Abonnement_idAbonnement`)
REFERENCES `Abonnement` (`idAbonnement`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Artiste`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Artiste` (
`idArtiste` INT NOT NULL,
`Nom` VARCHAR(45) NOT NULL,
`Prénom` VARCHAR(45) NOT NULL,
`Pseudo` VARCHAR(45) NULL,
`Adresse Email` VARCHAR(45) NOT NULL,
`Numéro de téléphone` VARCHAR(45) NOT NULL,
`Style de musique` VARCHAR(45) NOT NULL,
PRIMARY KEY (`idArtiste`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Préférence utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Préférence utilisateur` (
`idPréférence utilisateur` INT NOT NULL,
`Style de musique` VARCHAR(45) NULL,
`Artiste_idArtiste` INT NOT NULL,
PRIMARY KEY (`idPréférence utilisateur`, `Artiste_idArtiste`),
CONSTRAINT `fk_Préférence utilisateur_Artiste1`
FOREIGN KEY (`Artiste_idArtiste`)
REFERENCES `Artiste` (`idArtiste`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Ticket` (
`idTicket` INT NOT NULL,
`Place` VARCHAR(45) NULL,
PRIMARY KEY (`idTicket`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Avis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Avis` (
`idAvis` INT NULL,
`Critique` VARCHAR(45) NULL,
`Note` VARCHAR(45) NULL,
`Date` VARCHAR(45) NULL,
PRIMARY KEY (`idAvis`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Capteur Sonore`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Capteur Sonore` (
`idCapteur Sonore` INT NOT NULL,
`Position` VARCHAR(45) NOT NULL,
`Date` VARCHAR(45) NOT NULL,
`Niveau sonore` VARCHAR(45) NOT NULL,
PRIMARY KEY (`idCapteur Sonore`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Salle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Salle` (
`idSalle` INT NOT NULL,
`Adresse` VARCHAR(45) NOT NULL,
`Carte Sonore` VARCHAR(45) NULL,
`Capteur Sonore_idCapteur Sonore` INT NOT NULL,
PRIMARY KEY (`idSalle`, `Capteur Sonore_idCapteur Sonore`),
CONSTRAINT `fk_Salle_Capteur Sonore1`
FOREIGN KEY (`Capteur Sonore_idCapteur Sonore`)
REFERENCES `Capteur Sonore` (`idCapteur Sonore`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Concert`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Concert` (
`idConcert` INT NOT NULL,
`Date` VARCHAR(45) NOT NULL,
`Durée` VARCHAR(45) NOT NULL,
`Heure début` VARCHAR(45) NOT NULL,
`Utilisateur_idUtilisateur` INT NOT NULL,
`Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Utilisateur_Concert_idConcert` INT NOT NULL,
`Salle_idSalle` INT NOT NULL,
PRIMARY KEY (`idConcert`, `Utilisateur_idUtilisateur`, `Utilisateur_Abonnement_idAbonnement`, `Utilisateur_Concert_idConcert`, `Salle_idSalle`),
CONSTRAINT `fk_Concert_Salle1`
FOREIGN KEY (`Salle_idSalle`)
REFERENCES `Salle` (`idSalle`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Administrateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Administrateur` (
`idAdministrateur` INT NOT NULL,
`Nom` VARCHAR(45) NOT NULL,
`Prénom` VARCHAR(45) NOT NULL,
`Expérience` VARCHAR(45) NULL,
PRIMARY KEY (`idAdministrateur`))
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Utilisateur_has_Concert`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Utilisateur_has_Concert` (
`Utilisateur_idUtilisateur` INT NOT NULL,
`Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Concert_idConcert` INT NOT NULL,
`Concert_Utilisateur_idUtilisateur` INT NOT NULL,
`Concert_Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Concert_Utilisateur_Concert_idConcert` INT NOT NULL,
`Ticket_idTicket` INT NOT NULL,
PRIMARY KEY (`Utilisateur_idUtilisateur`, `Utilisateur_Abonnement_idAbonnement`, `Concert_idConcert`, `Concert_Utilisateur_idUtilisateur`, `Concert_Utilisateur_Abonnement_idAbonnement`, `Concert_Utilisateur_Concert_idConcert`, `Ticket_idTicket`),
CONSTRAINT `fk_Utilisateur_has_Concert_Utilisateur1`
FOREIGN KEY (`Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement`)
REFERENCES `Utilisateur` (`idUtilisateur` , `Abonnement_idAbonnement`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Utilisateur_has_Concert_Concert1`
FOREIGN KEY (`Concert_idConcert` , `Concert_Utilisateur_idUtilisateur` , `Concert_Utilisateur_Abonnement_idAbonnement` , `Concert_Utilisateur_Concert_idConcert`)
REFERENCES `Concert` (`idConcert` , `Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement` , `Utilisateur_Concert_idConcert`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Utilisateur_has_Concert_Ticket1`
FOREIGN KEY (`Ticket_idTicket`)
REFERENCES `Ticket` (`idTicket`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Concert_has_Utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Concert_has_Utilisateur` (
`Concert_idConcert` INT NOT NULL,
`Concert_Utilisateur_idUtilisateur` INT NOT NULL,
`Concert_Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Concert_Utilisateur_Concert_idConcert` INT NOT NULL,
`Utilisateur_idUtilisateur` INT NOT NULL,
`Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Avis_idAvis` INT NOT NULL,
PRIMARY KEY (`Concert_idConcert`, `Concert_Utilisateur_idUtilisateur`, `Concert_Utilisateur_Abonnement_idAbonnement`, `Concert_Utilisateur_Concert_idConcert`, `Utilisateur_idUtilisateur`, `Utilisateur_Abonnement_idAbonnement`, `Avis_idAvis`),
CONSTRAINT `fk_Concert_has_Utilisateur_Concert1`
FOREIGN KEY (`Concert_idConcert` , `Concert_Utilisateur_idUtilisateur` , `Concert_Utilisateur_Abonnement_idAbonnement` , `Concert_Utilisateur_Concert_idConcert`)
REFERENCES `Concert` (`idConcert` , `Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement` , `Utilisateur_Concert_idConcert`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Concert_has_Utilisateur_Utilisateur1`
FOREIGN KEY (`Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement`)
REFERENCES `Utilisateur` (`idUtilisateur` , `Abonnement_idAbonnement`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Concert_has_Utilisateur_Avis1`
FOREIGN KEY (`Avis_idAvis`)
REFERENCES `Avis` (`idAvis`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Administrateur_has_Capteur Sonore`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Administrateur_has_Capteur Sonore` (
`Administrateur_idAdministrateur` INT NOT NULL,
`Capteur Sonore_idCapteur Sonore` INT NOT NULL,
`Carte sonore` VARCHAR(45) NULL,
`Informations` VARCHAR(45) NULL,
PRIMARY KEY (`Administrateur_idAdministrateur`, `Capteur Sonore_idCapteur Sonore`),
CONSTRAINT `fk_Administrateur_has_Capteur Sonore_Administrateur1`
FOREIGN KEY (`Administrateur_idAdministrateur`)
REFERENCES `Administrateur` (`idAdministrateur`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Administrateur_has_Capteur Sonore_Capteur Sonore1`
FOREIGN KEY (`Capteur Sonore_idCapteur Sonore`)
REFERENCES `Capteur Sonore` (`idCapteur Sonore`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Concert_has_Artiste`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Concert_has_Artiste` (
`Concert_idConcert` INT NOT NULL,
`Concert_Utilisateur_idUtilisateur` INT NOT NULL,
`Concert_Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Concert_Utilisateur_Concert_idConcert` INT NOT NULL,
`Artiste_idArtiste` INT NOT NULL,
PRIMARY KEY (`Concert_idConcert`, `Concert_Utilisateur_idUtilisateur`, `Concert_Utilisateur_Abonnement_idAbonnement`, `Concert_Utilisateur_Concert_idConcert`, `Artiste_idArtiste`),
CONSTRAINT `fk_Concert_has_Artiste_Concert1`
FOREIGN KEY (`Concert_idConcert` , `Concert_Utilisateur_idUtilisateur` , `Concert_Utilisateur_Abonnement_idAbonnement` , `Concert_Utilisateur_Concert_idConcert`)
REFERENCES `Concert` (`idConcert` , `Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement` , `Utilisateur_Concert_idConcert`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Concert_has_Artiste_Artiste1`
FOREIGN KEY (`Artiste_idArtiste`)
REFERENCES `Artiste` (`idArtiste`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `Utilisateur_has_Préférence utilisateur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Utilisateur_has_Préférence utilisateur` (
`Utilisateur_idUtilisateur` INT NOT NULL,
`Utilisateur_Abonnement_idAbonnement` INT NOT NULL,
`Préférence utilisateur_idPréférence utilisateur` INT NOT NULL,
`Préférence utilisateur_Artiste_idArtiste` INT NOT NULL,
PRIMARY KEY (`Utilisateur_idUtilisateur`, `Utilisateur_Abonnement_idAbonnement`, `Préférence utilisateur_idPréférence utilisateur`, `Préférence utilisateur_Artiste_idArtiste`),
CONSTRAINT `fk_Utilisateur_has_Préférence utilisateur_Utilisateur1`
FOREIGN KEY (`Utilisateur_idUtilisateur` , `Utilisateur_Abonnement_idAbonnement`)
REFERENCES `Utilisateur` (`idUtilisateur` , `Abonnement_idAbonnement`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `fk_Utilisateur_has_Préférence utilisateur_Préférence util1`
FOREIGN KEY (`Préférence utilisateur_idPréférence utilisateur` , `Préférence utilisateur_Artiste_idArtiste`)
REFERENCES `Préférence utilisateur` (`idPréférence utilisateur` , `Artiste_idArtiste`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
